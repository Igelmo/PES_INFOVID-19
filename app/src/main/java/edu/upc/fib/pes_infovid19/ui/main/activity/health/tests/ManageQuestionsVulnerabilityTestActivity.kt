package edu.upc.fib.pes_infovid19.ui.main.activity.health.tests

import android.os.Bundle
import android.widget.ArrayAdapter
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.observe
import edu.upc.fib.pes_infovid19.R
import edu.upc.fib.pes_infovid19.domain.structures.QuestionVulnerabilityTest
import edu.upc.fib.pes_infovid19.domain.viewmodel.VulnerableTestViewModel
import edu.upc.fib.pes_infovid19.ui.main.adapter.ManageQuestionsVulnerabilityTestAdapter
import kotlinx.android.synthetic.main.activity_manage_questions_vulnerability_test.*

class ManageQuestionsVulnerabilityTestActivity : AppCompatActivity() {

    private val viewModel: VulnerableTestViewModel by viewModels()
    private val adapter = ManageQuestionsVulnerabilityTestAdapter()
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_manage_questions_vulnerability_test)

        ArrayAdapter.createFromResource(this, R.array.types, android.R.layout.simple_spinner_item).also { spinnerAdapter ->
            spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
            spinnerNewVulnerabilityQuestionType.adapter = spinnerAdapter
        }

        setSupportActionBar(toolbarManageQuestionsVulnerabilityTest)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)

        recyclerViewManageVulnerabilityTest.adapter = adapter

        viewModel.questionsVulnerabilityTestLiveData.observe(this) { questionsSnapshot ->
            adapter.updateQuestions(questionsSnapshot)
        }

        addQuestion.setOnClickListener {
            adapter.addQuestion(
                QuestionVulnerabilityTest(
                    text = textFieldNewVulnerabilityQuestion.text.toString(),
                    points = textFieldNewVulnerabilityQuestionPoints.text.toString().toDouble(),
                    type = spinnerNewVulnerabilityQuestionType.selectedItem.toString()
                )
            )
            textFieldNewVulnerabilityQuestion.setText("")
            textFieldNewVulnerabilityQuestionPoints.setText("")
        }

        buttonVulnerabilityTestUpdateChanges.setOnClickListener {
            adapter.questionDeletedList.forEach {
                viewModel.deleteQuestionVulnerabilityTest(it)
            }
            adapter.questionList.filter { it.id.isNotBlank() }.forEach {
                viewModel.modifyQuestionVulnerabilityTest(it.id, it)
            }
            adapter.questionList.filter { it.id.isBlank() }.forEach {
                viewModel.addQuestionVulnerabilityTest(it)
            }
            onSupportNavigateUp()
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        onBackPressed()
        return true
    }
}